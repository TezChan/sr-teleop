#!/usr/bin/env python

# ####################################################################
# Copyright (c) 2013 Shadow Robot Company Ltd.
# All rights reserved.
# This code is proprietary and may not be used, copied, distributed without
# prior authorisation and agreement from Shadow Robot Company Ltd. *
# ####################################################################

"""
see README.md
"""

import usb.core, usb.util
from sys import exit as sysexit
from time import sleep

import rospy
from logitech_r400.msg import LogitechR400

CONTOUR_ID_VENDOR = 0x0e00
CONTOUR_ID_PRODUCT = 0x0111

class LogitechR400Usb(object):
    """
    Usb driver for the Logitech R400.

    In order to properly detach the device at the end
    it is strongly suggested to use this class like this:

    from logitech_r400 import LogitechR400Usb
    with LogitechR400Usb() as pointer:
        pointer.read_data()
    """

    __device = None
    __interface = 0
    __state = LogitechR400()

    def __init__(self):
        self._pub = rospy.Publisher("~state", LogitechR400, queue_size=1)

        for _ in range(10):
            try:
                self.grab_device()
                break
            except usb.core.USBError:
                rospy.logdebug("Trying to grab the device once more.")
                sleep(0.1)

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.release_device()

    def grab_device(self):
        """
        Grabs the usb device.
        """
        self.__device = usb.core.find(idVendor=CONTOUR_ID_VENDOR,
                                      idProduct=CONTOUR_ID_PRODUCT)

        if self.__device is None:
            raise ValueError("Logitech R400 was not found")

        if self.__device.is_kernel_driver_active(self.__interface):
            rospy.logdebug("Kernel driver attached - trying to detach the driver.")
            try:
                self.__device.detach_kernel_driver(self.__interface)
                rospy.logdebug("kernel driver detached")
            except usb.core.USBError as usb_exc:
                sysexit("Could not detach kernel driver: %s" %str(usb_exc))

        self.__device.set_configuration()
        usb.util.claim_interface(self.__device, self.__interface)

    def release_device(self):
        """
        Releases the devices and reattaches the kernel driver if necessary.
        """
        try:
            usb.util.release_interface(self.__device, self.__interface)
            self.__device.attach_kernel_driver(self.__interface)
        except usb.core.USBError:
            rospy.logwarn("Didn't reattach the kernel driver properly.")

    def read_data(self):
        """
        Reads the data - called from a thread.
        """
        #Reading the data
        endpoint = self.__device[0][(0, 0)][0]
        while not rospy.is_shutdown():
            try:
                data = self.__device.read(endpoint.bEndpointAddress,
                                          endpoint.wMaxPacketSize)

                self._fill_state(data)
            except usb.core.USBError:
                rospy.logdebug("Reader timedout - no events received.")

    def _fill_state(self, data):
        """
        Fills the self.__state properly from the raw data.
        """
        
#         print "DATA: "
#         print len(data)
#         for d in data:
#             print "{:X}\n".format(d)
            
        
        self.__state.buttons = [False] * 5
            
        if data[2] == 0x4e:
            self.__state.buttons[0] = True
        elif data[2] == 0x4b:
            self.__state.buttons[1] = True
        elif data[2] == 0x05:
            self.__state.buttons[2] = True
        elif data[2] == 0x3e:
            self.__state.buttons[3] = True
        elif data[2] == 0x29:
            self.__state.buttons[4] = True
            
        self._pub.publish(self.__state)


if __name__ == "__main__":
    rospy.init_node("logitech_r400")

    with LogitechR400Usb() as pointer:
        pointer.read_data()
